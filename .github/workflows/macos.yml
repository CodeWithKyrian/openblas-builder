name: Build for macOS

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'OpenBLAS Version to Build (e.g. v0.3.27)'
        required: true
        default: 'v0.3.27'

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        openmp: [0, 1]
        target: [VORTEX, NEHALEM]


    steps:
    - name: Checkout Repository
      with:
        repository: OpenMathLib/OpenBLAS
        ref: ${{ github.event.inputs.version }}
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        brew reinstall gcc
        brew install coreutils cmake ccache
        brew install llvm

    - name: Compilation cache
      uses: actions/cache@v3
      with:
        path: ~/.ccache
        # We include the commit sha in the cache key, as new cache entries are
        # only created if there is no existing entry for the key yet.
        # GNU make and cmake call the compilers differently. It looks like
        # that causes the cache to mismatch. Keep the ccache for both build
        # tools separate to avoid polluting each other.
        key: ccache-macos-latest-make-${{ github.ref }}-${{ github.sha }}
        # Restore a matching ccache cache entry. Prefer same branch and same Fortran compiler.
        restore-keys: |
          ccache-macos-latest-make-${{ github.ref }}
          ccache-macos-latest-make
          ccache-macos-latest

    - name: Configure ccache
      run: |
        # Add ccache to path
        echo "$(brew --prefix)/opt/ccache/libexec" >> $GITHUB_PATH
        echo "/opt/homebrew/opt/llvm/bin" >>$GITHUB_PATH
        echo "" >>$GITHUB_PATH
        # Limit the maximum size and switch on compression to avoid exceeding the total disk or cache quota (5 GB).
        test -d ~/.ccache || mkdir -p ~/.ccache
        echo "max_size = 300M" > ~/.ccache/ccache.conf
        echo "compression = true" >> ~/.ccache/ccache.conf
        ccache -s

    - name: Build OpenBLAS
      id: builder
      run: |
        if [[ "${{matrix.openmp}}" -eq 0 ]]; then
          echo "OPENMP_SUFFIX=serial" >> "$GITHUB_OUTPUT"
          export OPENMP_SUFFIX="serial"
        else
          echo "OPENMP_SUFFIX=openmp" >> "$GITHUB_OUTPUT"
          export OPENMP_SUFFIX="openmp"
        fi

        if [[ "${{matrix.target}}" == "VORTEX" ]]; then
          echo "TARGET_SUFFIX=arm64" >> "$GITHUB_OUTPUT"
          export TARGET_SUFFIX="arm64"
        else
          echo "TARGET_SUFFIX=x86_64" >> "$GITHUB_OUTPUT"
          export TARGET_SUFFIX="x86_64"
        fi
        
        
        export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
        export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
        export CC="/opt/homebrew/opt/llvm/bin/clang"
        make -j$(nproc) DYNAMIC_ARCH=1 USE_OPENMP=${{matrix.openmp}} TARGET=${{matrix.target}} NUM_THREADS=56 FC="ccache gfortran" libs netlib shared
        make PREFIX=$PWD/openblas-${OPENMP_SUFFIX}-${TARGET_SUFFIX} install

    - name: Show ccache status
      continue-on-error: true
      run: ccache -s

    - name: Compress to Tarball
      id: compressor
      run: |
        tar -czvf openblas-${{ steps.builder.outputs.OPENMP_SUFFIX }}-${{ steps.builder.outputs.TARGET_SUFFIX }}.tar.gz openblas-${{ steps.builder.outputs.OPENMP_SUFFIX }}-${{ steps.builder.outputs.TARGET_SUFFIX }}

    - name: Upload OpenBLAS
      uses: actions/upload-artifact@v4
      with:
        name: openblas-${{ steps.compressor.outputs.OPENMP_SUFFIX }}-${{ steps.compressor.outputs.TARGET_SUFFIX }}-{{ github.event.inputs.version }}
        path: ${{ github.workspace }}/*.tar.gz

